# File: dg32.cfg

# Purpose: icon configuration file

#
# Copyright (c) 1997-2001 Tim Baker
#
# This software may be copied and distributed for educational, research, and
# not for profit purposes provided that this copyright and statement are
# included in all such copies.
#

proc DGInitPalette {} {

	set chan [open [CPathTk config palette-dg32]]
	set buf [read $chan]
	close $chan
	set index 0
	foreach string [split $buf \n] {
		if {[scan $string "%d %d %d" r g b] == 3} {
			palette set $index [format #%02x%02x%02x $r $b $b]
		}
	}
	return
}
# DGInitPalette

### You must call "angband init_icons" to initialize the icon
### environment. The argument is the size of icons to use,
### either 16 or 32.
NSConfig::InitIcons 32

# This is a list of type names for David E. Gervais' graphics.
# The actual file name is derived from the type name.

### Masked icons
set data [list \
	armor effects food classm humans \
	jewls magic misc potions wands \
	weapons people dragon monster1 monster2 \
	monster3 monster4 monster5 monster6 monster7 \
	undead uniques edging3
]

# Create each icon type
foreach iconType $data {

	# Build the gif file name
	set gif dg_${iconType}32.gif

	# The masks are generated automatically from the white pixels
	set mask $gif:makeMask

	# Load the icon data
	NSConfig::CreateIconType $iconType $gif $mask 32

	# Synch icon data with mask data
	NSConfig::Maskify $iconType
}

### Non-masked icons
set data [list \
	dungeon grounds extra1 \
	town0 town1 town2 town3 town4 \
	town5 town6 town7 town8 town9 \
	edging1 edging2
]

# Create each icon type
foreach iconType $data {

	# Build the gif file name
	set gif dg_${iconType}32.gif

	# Unmasked
	set mask {}

	# Load the icon data
	NSConfig::CreateIconType $iconType $gif $mask 32
}

# Use Adam Bolt's 32x32 graphics for monsters
NSConfig::CreateIconType adam adam16.gif adam16.gif:makeMask 16

# Synch icon data with mask data
NSConfig::Maskify adam

NSConfig::CreateIconType pattern pattern16.gif "" 16


# The "town" icon type
NSConfig::CreateIconType town town32.gif "" 32
	
NSConfig::SourceOne classic-common

# Hack
NSConfig::NoMoreIcons

# The "town" file is shared by all xxx.cfg files
NSConfig::ShareConfigFile town town

# Assign an icon to each flavored object
NSConfig::SourceOne config-flavor

# XXX Mega-Hack -- David E. Gervais created two kinds of doors,
# wooden doors and metal doors with skulls on top. The next bit of
# code randomly chooses which door image to use based on the dungeon
# level. We also choose a different permanent wall when in the town.
# The assignments are made when a new level is entered.

# WARNING: Many hard-coded graphic and f_info[] indexes.

qebind DGHack <Dungeon-enter> {DGHackProc %c}

# If we are in the town, and enter level 1, we want a new set of icons.
# Without this binding, the same icons are used each time we enter level
# 1 from the town.
qebind DGHack <Dungeon-generate> {
	if {%c && (%c == [Global dghack,depth])} {
		Global dghack,depth -1
	}
}

Global dghack,wallType -1
Global dghack,plainVineBlood -1
Global dghack,doorType -1
Global dghack,treeType -1
Global dghack,depth -1

# NOT USED
proc DGHackProc {depth} {

	# Choose one of the two major wall types "brick" or "boulder"
	set brickOrBoulder [expr {rand() >= 0.5}]
#set brickOrBoulder [expr {$depth <= 50}]

	# Choose plain, vine or blood walls
	set wallBump 3 ; # Set to zero for 1/3 chance for each type
	set plainVineBlood [expr {int(rand() * (3 + $wallBump))}]

	# Choose one of 4 different door types within each wall type
	set doorType [expr {int(rand() * 4)}]
#set doorType [expr {($depth % 50) / 12}]
#if {$doorType == 4} {incr doorType -1}
#set doorType [lindex [list 2 3 0 1] $doorType]

	# Choose one of 2 different tree types (in dungeon)
	set treeType [expr {int(rand() * 2)}]

	# If this is the same dungeon level as last time, then use the
	# same icons. This is done for two reasons: 1) when the game
	# starts up we assign the icons once below, and don't want them
	# to changed when <Dungeon-enter> is generated; 2) WOR back from
	# the town would be strange if the icons changed.
	if {$depth && ([Global dghack,depth] == $depth)} {
		set brickOrBoulder [Global dghack,wallType]
		set plainVineBlood [Global dghack,plainVineBlood]
		set doorType [Global dghack,doorType]
		set treeType [Global dghack,treeType]
	}

	# If this is a "special level" we will force the use of some icons
	set specialLevel [expr {$depth >= 99}]

	incr specialLevel [angband player inside_quest]
	set doorHead 32
	set doorTail 47
	if {[angband setting set vanilla_town]} {
		set gifTown town0
	} else {
		set gifTown town1
	}

	# Force skull doors on special levels
	if {$specialLevel} {
		set doorType 1
	}

	# Get the icon index of the first door. The doors are closed/open/broken
	if {$depth} {
		set gifDoor [expr {$brickOrBoulder * 27 + ($doorType * 3 + 3)}]
		set gifDoorType dungeon
	} else {
		set gifDoor 31
		set gifDoorType $gifTown
	}
		
	# Assign the door icons to open door, broken door, locked/jammed doors
	assign set feature 4 "icon $gifDoorType [expr {$gifDoor + 1}]"
	assign set feature 5 "icon $gifDoorType [expr {$gifDoor + 2}]"
	for {set f_idx $doorHead} {$f_idx <= $doorTail} {incr f_idx} {
		assign set feature $f_idx "icon $gifDoorType $gifDoor"
	}

	# Sometimes choose "rough" floor for boulder walls, otherwise choose
	# "normal" floor
	### Ack! Trees don't have "rough" base, so always use "normal" floor
	set gifFloor 0
	if {$depth && 0} {
		if {$brickOrBoulder && [expr {rand() < 0.5}]} {
			set gifFloor [expr {$brickOrBoulder * 6}]
		}
	}
	assign set feature 1 "icon grounds $gifFloor"
	assign set feature 2 "icon grounds $gifFloor"

	# There are 3 styles of staircase icons for each wall type.
	# They should match the door type we are using. The first two
	# door types (round wood, skull) use the same stair type (round stair).
	if {$depth} {
		set stairType $doorType
		if {$stairType != 0} {
			incr stairType -1
		}
		set gifStair [expr {$brickOrBoulder * 27 + ($stairType * 3 + 15)}]
		set gifStairType dungeon
	} else {
		set gifStair 28
		set gifStairType $gifTown
	}

	# Up staircase, down staircase
	assign set feature 6 "icon $gifStairType $gifStair"
	assign set feature 7 "icon $gifStairType [expr {$gifStair + 1}]"

	# Quest entrances/exits
	foreach f_idx {8 9 10 11 12} offset {1 0 1 0 1} {
		assign set feature $f_idx \
			"icon $gifStairType [expr {$gifStair + $offset}]"
	}

	if {[angband setting set vanilla_town]} {
		# Shops, because we want to force proper icon type
		foreach f_idx {74 75 76 77 78 79 80 81 82} index {3 4 5 6 7 8 27 23 9} {
			assign set feature $f_idx "icon $gifTown $index"
		}
	}

	# In vanilla_town, we don't use lighting for the perma-wall.
	feature configure 60 -town [angband setting set vanilla_town]

	# Get the icon index of the wall
	set gifWall [expr {$brickOrBoulder * 27}]

	if {$plainVineBlood > $wallBump} {
		set gifWall [expr {63 + $brickOrBoulder * 12 +
			3 * ($plainVineBlood - $wallBump - 1)}]
	}

	# Assign to secret + granite + permanent. If it looks like the feature
	# was assigned an alternate, then we make sure the first frame is
	# updated with the chosen wall icon. But since pillars only have the
	# "normal" floor as a base, we only use pillar icons if the floor is
	# "normal".
	assign set feature 48 "icon dungeon $gifWall"
	for {set f_idx 56} {$f_idx <= 63} {incr f_idx} {
		scan [assign set feature $f_idx] "%s %d" assignType index
		if {[string equal $assignType alternate]} {
			alternate assign $index 0 -type dungeon -index $gifWall
			if {$gifFloor == 0} {
				alternate assign $index 1 -type extra1 -index 51
			} else {
				alternate assign $index 1 -type dungeon -index $gifWall
			}
		} else {
			assign set feature $f_idx "icon dungeon $gifWall"
		}
	}

	# Use "white" permanent walls in the town
	if {!$depth} {

		# Hack -- Force wall lighting in daytime, but not at night
#		set turn [angband player turn]
#		set TOWN_DAWN 10000
#		set daytime [expr {($turn % (10 * $TOWN_DAWN)) < ((10 * $TOWN_DAWN) / 2)}]
		
		set gifWall 0
		for {set f_idx 60} {$f_idx <= 63} {incr f_idx} {
			assign set feature $f_idx "icon $gifTown $gifWall"
#			feature configure $f_idx -town $daytime
		}
	}

	# Use blighted yellow trees in the dungeon, green ones in town.
	# Set tree background to "grass" in town, "floor" in dungeon.
	set grass [angband f_info find -name grass]
	set tree [angband f_info find -name tree]
	if {$depth} {
		set treeIndex [expr {$treeType ? 87 : 24}]
		assign set feature $tree "icon dungeon $treeIndex"
		feature configure $tree -background 1
	} else {
		assign set feature $tree "icon grounds 54"
		feature configure $tree -background $grass
	}

	# Remember which icons were chosen.
	if {$depth} {
		Global dghack,wallType $brickOrBoulder
		Global dghack,plainVineBlood $plainVineBlood
		Global dghack,doorType $doorType
		Global dghack,treeType $treeType
		Global dghack,depth $depth
	}

	if {[info exists ::Global(main,widget)]} {

		# Redraw the Main Window
		[Global main,widget] wipe
	}

	return
}

proc makeList {first last} {

	set result {}
	for {set i $first} {$i <= $last} {incr i} {
		lappend result $i
	}
	return $result
}

proc DGHackProc {depth} {

	# Choose one of the two major wall types "brick" or "boulder".
	set n [expr {rand() >= 0.5}]
	set brickOrBoulder [lindex [list brick boulder] $n]

	# Choose plain, vine or blood walls
	set n 0
	if {int(rand() * 5) == 1} {
		set n 1
	# 1/5 chance of blood
	} elseif {int(rand() * 5) == 1} {
		set n 2
	}
	set plainVineBlood [lindex [list plain vine blood] $n]

	# Choose one of 5 different door types
	set n [expr {int(rand() * 5)}]
	set doorType [lindex [list round skull wood metal wall] $n]

	# Choose one of 2 different tree types (in dungeon)
	set n [expr {int(rand() * 2)}]
	set treeType [lindex [list leafy bare] $n]

	# If this is the same dungeon level as last time, then use the
	# same icons. This is done for two reasons: 1) when the game
	# starts up we assign the icons once below, and don't want them
	# to changed when <Dungeon-enter> is generated; 2) WOR back from
	# the town would be strange if the icons changed.
	if {$depth && ([Global dghack,depth] == $depth)} {
		set brickOrBoulder [Global dghack,wallType]
		set plainVineBlood [Global dghack,plainVineBlood]
		set doorType [Global dghack,doorType]
		set treeType [Global dghack,treeType]
	}

	# If this is a "special level" we will force the use of some icons
	set specialLevel [expr {$depth >= 99}]

	incr specialLevel [angband player inside_quest]
	if {[angband setting set vanilla_town]} {
		set gifTown town0
	} else {
		set gifTown town1
	}

	# Force skull doors on special levels
	if {$specialLevel} {
		set doorType skull
	}

	set door(round,brick) 3
	set door(skull,brick) 6
	set door(wood,brick) 9
	set door(metal,brick) 12

	set door(round,boulder) 30
	set door(skull,boulder) 33
	set door(wood,boulder) 36
	set door(metal,boulder) 39

	set door(wall,brick,plain) 69
	set door(wall,brick,vine) 71
	set door(wall,brick,blood) 73
	set door(wall,boulder,plain) 81
	set door(wall,boulder,vine) 83
	set door(wall,boulder,blood) 85
	
	# Get the icon index of the first door. The doors are closed/open/broken
	if {$depth} {
		set gifDoorType dungeon
		if {$doorType == "wall"} {
			set gifDoor $door(wall,$brickOrBoulder,$plainVineBlood)

			# open/broken share same icon
			set brokenOffset 1
		} else {
			set gifDoor $door($doorType,$brickOrBoulder)
			set brokenOffset 2
		}
	} else {
		set gifDoorType $gifTown
		set gifDoor 31
		set brokenOffset 2
	}
		
	# Assign the door icons to open door, broken door, locked/jammed doors.
	# Note: locked/jammed mimic first door.
	assign set feature [const FEAT_OPEN] "icon $gifDoorType [expr {$gifDoor + 1}]"
	assign set feature [const FEAT_BROKEN] "icon $gifDoorType [expr {$gifDoor + $brokenOffset}]"
	assign set feature [const FEAT_DOOR_HEAD] "icon $gifDoorType $gifDoor"

	# Sometimes choose "rough" floor for boulder walls, otherwise choose
	# "normal" floor
	if {0 && $depth && ($brickOrBoulder == "boulder") && [expr {rand() < 0.5}]} {
		set gifFloor 6

		# Trees don't have "rough" base, so always use masked icons for trees
		set maskTree 1
	} else {
		set gifFloor 0
		set maskTree 0
	}
	assign set feature [const FEAT_FLOOR] "icon grounds $gifFloor"

	# There are 3 styles of staircase icons for each wall type.
	# They should match the door type we are using. The first two
	# door types (round wood, skull) use the same stair type (round stair).

	set stair(round,brick) 15
	set stair(skull,brick) 15
	set stair(wood,brick) 18
	set stair(metal,brick) 21

	set stair(round,boulder) 42
	set stair(skull,boulder) 42
	set stair(wood,boulder) 45
	set stair(metal,boulder) 48
	
	if {$depth} {
		set gifStairType dungeon
		if {$doorType == "wall"} {
			set gifStair $stair(round,$brickOrBoulder) ; # Randomize
		} else {
			set gifStair $stair($doorType,$brickOrBoulder)
		}
	} else {
		set gifStairType $gifTown
		set gifStair 28
	}

	# Up staircase, down staircase
	assign set feature [const FEAT_LESS] "icon $gifStairType $gifStair"
	assign set feature [const FEAT_MORE] "icon $gifStairType [expr {$gifStair + 1}]"

	# Quest entrances/exits
	foreach f_idx [list [const FEAT_QUEST_EXIT] [const FEAT_QUEST_UP]] {
		assign set feature $f_idx "icon $gifStairType $gifStair"
	}
	foreach f_idx [list [const FEAT_QUEST_ENTER] [const FEAT_QUEST_DOWN]] {
		assign set feature $f_idx "icon $gifStairType [expr {$gifStair + 1}]"
	}

	if {[angband setting set vanilla_town]} {
		# Shops, because we want to force proper icon type
		foreach f_idx [makeList [const FEAT_SHOP_HEAD] [const FEAT_SHOP_TAIL]] index {3 4 5 6 7 8 27 23 9} {
			assign set feature $f_idx "icon $gifTown $index"
		}
	}

	# In vanilla_town, we don't use lighting for the perma-wall.
	feature configure [const FEAT_PERM_EXTRA] -town [angband setting set vanilla_town]

	# Get the icon index of the wall

	set wall(brick,plain) 0
	set wall(brick,vine) 63
	set wall(brick,blood) 66
	set wall(boulder,plain) 27
	set wall(boulder,vine) 75
	set wall(boulder,blood) 78

	if {$depth} {
		set gifWall $wall($brickOrBoulder,$plainVineBlood)
	} else {
		set gifWall 0
	}

	# Assign to secret + granite + permanent. If it looks like the feature
	# was assigned an alternate, then we make sure the first frame is
	# updated with the chosen wall icon. But since pillars only have the
	# "normal" floor as a base, we only use pillar icons if the floor is
	# "normal".
	# Note: since a feature may mimic another, only a few assignments
	# need to be made.
	foreach f_idx [list [const FEAT_WALL_EXTRA] [const FEAT_PERM_EXTRA]] {
		scan [assign set feature $f_idx] "%s %d" assignType index
		if {[string equal $assignType alternate]} {
			alternate assign $index 0 -type dungeon -index $gifWall
			if {$gifFloor == 0} {
				alternate assign $index 1 -type extra1 -index 51
			} else {
				alternate assign $index 1 -type dungeon -index $gifWall
			}
		} else {
			assign set feature $f_idx "icon dungeon $gifWall"
		}
	}

	# Use "white" permanent walls in the town
	if {!$depth} {

		# Hack -- Force wall lighting in daytime, but not at night
#		set turn [angband player turn]
#		set TOWN_DAWN 10000
#		set daytime [expr {($turn % (10 * $TOWN_DAWN)) < ((10 * $TOWN_DAWN) / 2)}]
		
		set gifWall 0
		set f_idx 60
		assign set feature $f_idx "icon $gifTown $gifWall"
#		feature configure $f_idx -town $daytime
	}

	# Use blighted yellow trees in the dungeon, green ones in town.
	# Set tree background to "grass" in town, "floor" in dungeon.
	set feat_grass [const FEAT_GRASS]
	set feat_tree [const FEAT_TREES]
	if {$depth} {
		if {$maskTree} {
			set tree(leafy) 86
			set tree(bare) 75
			assign set feature $feat_tree "icon edging3 $tree($treeType)"
			feature configure $feat_tree -background 1
		} else {
			set tree(leafy) 24
			set tree(bare) 87
			assign set feature $feat_tree "icon dungeon $tree($treeType)"
			feature configure $feat_tree -background $feat_tree
		}
	} else {
		assign set feature $feat_tree "icon grounds 54"
		feature configure $feat_tree -background $feat_grass
	}

	# Remember which icons were chosen.
	if {$depth} {
		Global dghack,wallType $brickOrBoulder
		Global dghack,plainVineBlood $plainVineBlood
		Global dghack,doorType $doorType
		Global dghack,treeType $treeType
		Global dghack,depth $depth
	}

	if {[info exists ::Global(main,widget)]} {

		# Redraw the Main Window
		[Global main,widget] wipe
	}

	return
}

# When entering a town, see if a vault file for that town exists and
# read it in. This requires some knowledge of the t_info.txt file for
# determining which town file (and therefore which vault file) is used.

proc VaultCurrentProc {depth} {

	# Unset the current vault
	vault current 0

	if {$depth} return
	if {[struct set player_type 0 inside_arena]} return
	if {[struct set player_type 0 inside_quest]} return

	set town_num [struct set player_type 0 town_num]
	if {!$town_num} return

	switch -- $town_num {
		1 {
			if {[angband setting set vanilla_town]} {
				set name t_basic
			} elseif {[angband setting set lite_town]} {
				set name t_lite
			} else {
				set name t0000001
			}
		}
		default {
			set name t000000$town_num
		}
	}
	append name -[Global config,prefix].vlt
	set path [PathTk config $name]
	if {[file exists $path]} {
		vault current [Global vault,current]
		vault read [vault current] $path
	}

	return
}

# When entering a level, see if a custom .vlt file exists
qebind VaultCurrent <Dungeon-enter> {VaultCurrentProc %c}

# Assign pile icon to "object 0"
assign set object 0 "icon misc 54"

# Assign an icon to the character
NSConfig::SourceOne config-char

### Mega-Hack -- We use "tint" lighting for doors. This gamma correction
### gives door lighting which seems to match the lighting for walls.
feature lighting -radius 1 -brightness 0 -contrast 0 -gamma 0.9
feature lighting -radius 2 -brightness 0 -contrast 0 -gamma 0.7

