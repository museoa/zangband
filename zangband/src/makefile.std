# File: Makefile

# This is not a very "nice" Makefile, but it usually works.

#
# Note that you may have to make modifications below according
# to your machine, available libraries, compilation options,
# and your "visual module" of choice.  This Makefile is intended
# for use with Unix machines running X11, Curses, Ncurses, or Vt100,
# or possibly for "Atari" or "Amiga" computers with "Curses" ports,
# see below for more information.
#
#
# USAGE:  Simply type in "make portname" where portname is the name
#         of your port.  ie. "make open_bsd".  The default port can
#         be changed by editing the default_port target.
#
#
# Note that "main-mac.c", the visual module for the Macintosh,
# must be compiled in a special way, see elsewhere.
#
# Note that "main-win.c", the visual module for Windows,
# must be compiled in a special way, see elsewhere.
#
# Note that "main-ibm.c", "main-emx.c", and "main-286.c",
# the visual modules for various types of IBM-PC computers,
# must be compiled with special Makefiles, see elsewhere.
#
# Note that "main-lsl.c", the visual module for linux svga,
# is depreciated.  Do not use this unless you feel like making
# a heap of new tiles.
#
# Note that "main-acn.c", the visual module for Risc Acorn,
# must be compiled with "Makefile.acn", see elsewhere.
#
# If you are able to construct "main-xxx.c" and/or "Makefile.xxx"
# files for a currently unsupported system, please send them to me
# (rr9@angband.org) for inclusion in future versions.
#


##
## This is my compiler of choice, it seems to work most everywhere
##
CC := gcc

##
## This is the default port to compile
##
DEFAULT := linux

##
## Default Lua location
##

LUA := lua/

##
## ##### Zangband Files to compile #####
##


##
## The wrapper auto-generated files
##

LUAWOBJS := \
	l-monst.o l-object.o l-player.o l-random.o l-ui.o \
	l-misc.o l-spell.o

##
## The angband source files
##

ANGOBJS := $(LUAWOBJS) \
	variable.o tables.o util.o cave.o \
	object1.o object2.o monster1.o monster2.o \
	xtra1.o xtra2.o spells1.o spells2.o \
	melee1.o melee2.o save.o files.o fields.o\
	cmd1.o cmd2.o cmd3.o cmd4.o cmd5.o cmd6.o \
	store.o birth.o load.o\
	wizard1.o wizard2.o grid.o streams.o rooms.o \
	generate.o dungeon.o init1.o init2.o \
	effects.o quest.o racial.o script.o \
	artifact.o mutation.o flavor.o spells3.o \
	mspells1.o mspells2.o scores.o mind.o maid-x11.o\
	bldg.o obj_kind.o wild1.o wild2.o avatar.o notes.o\
	main-cap.o main-gcu.o main-x11.o main-xaw.o main-xpj.o\
	main-lsl.o main-vcs.o main-gtk.o main-win.o main.o \
	maid-grf.o main-dos.o main-ibm.o main-acn.o

##
## The "Utility" files
##

ZUTILOBJS := z-util.o z-virt.o z-form.o z-rand.o z-term.o

##
## The Borg files
##

BORGOBJS := \
	zborg1.o zborg2.o zborg3.o zborg4.o zborg5.o \
	zborg6.o zborg7.o zborg8.o zborg9.o \

##
## Get the list of .c files from the .o files
##
ANGSRCS := $(ANGOBJS:.o=.c)
ZUTILSRCS := $(ZUTILOBJS:.o=.c)
BORGSRCS := $(BORGOBJS:.o=.c)
LUAWSRCS := $(LUAWOBJS:.o=.c)

##
## The list of ports available
##
PORTS := default_port linux open_bsd main-cap vt100 solaris sgi dec \
	isc next aix cygwin dos ibm lcc risc

##
## Following are some "system" definitions
##
## No changes are needed to compile a version that will run on both
## X11 and Curses, in debugging mode, with maximal warnings, on many
## normal Unix machines of the Sun OS variety (non-solaris).
##
##
## See also "z-config.h" and "h-config.h" for important information.
##
## Some "examples" are given below, they can be used by simply
## removing the FIRST column of "#" signs from the "block" of lines
## you wish to use, and commenting out "standard" block below.
##
## This is not intended to be a "good" Makefile, just a "simple" one.
##

##
## You may have to add various X11 include/library directories to the
## "CFLAGS", if your machine places files in a weird location.
##
## You may be able to remove "-ltermcap" on some machines (ex: Solaris).
##
## You may have to replace "-lcurses" with "-lncurses" to use the
## "new curses" library instead of the "old curses" library, and
## you may have to add "-l/usr/include/ncurses" to the "CFLAGS".
##
## See "main-gcu.c" and "z-config.h" for some optional "curses" defines,
## including "USE_GETCH" and "USE_CURS_SET".  Note that "z-config.h" will
## attempt to "guess" at many of these flags based on your system.
##

## Generic compile flags
CFLAGS := -Wall -O2 -g -pipe

## Variation
# CFLAGS := -O1 -g

##
## Hack -- "install" as the fake target
## Select the default port to use
##
default_port: $(DEFAULT)


##
## Hack - dependancy to get them to compile properly
##
$(PORTS): install

##
## Hack - default install action
##
INSTALL := cp zangband ..

##
## Variation -- All the ports that work in Linux at once.
## (Use the -m option to start the one you want.)
##
##
## Graphics under X11 in linux.  (Run with the -g option)
## Note: Get the 16x16.bmp file, and put in [Z]directory/lib/xtra/graf
##       to get 256 colours.
##
linux: CFLAGS += -D"USE_GCU" -D"USE_VCS" -D"USE_XPJ"\
                 -D"USE_X11" -D"USE_XAW" -D"USE_LSL"\
                  `gtk-config --cflags` -D"USE_GTK" \
                 -pedantic -W -Wmissing-prototypes -Wmissing-declarations
 
linux: LIBS := -lX11 -lcurses -lncurses -L/usr/X11R6/lib -lz -lvgagl -lvga \
               -lXaw -lXext -lSM -lICE -lXmu -lXt -lgtk `gtk-config --libs`

##
## Variation -- Cygwin
##
cygwin: CFLAGS += -W -pedantic -mno-cygwin -DWINDOWS
cygwin: LIBS := -s -mno-cygwin -mwindows -e _mainCRTStartup -lwinmm
cygwin: ANGOBJS += angband.res readdib.o
cygwin: INSTALL := mv -f zangband.exe ../zangband.exe
cygwin: RES := windres
cygwin: RESCMD = $< -O coff -o $@

##
## Variation -- OpenBSD 
##

open_bsd: CFLAGS += -I/usr/x11r6/include  -D"USE_X11" -D"USE_GCU"
open_bsd: LIBS := -lX11 -lcurses -ltermcap -L/usr/X11R6/lib

##
## Variation -- Use "main-cap.c" instead of "main-gcu.c"
##
main-cap: CFLAGS += -D"USE_X11" -D"USE_CAP"
main-cap: LIBS := -lX11 -ltermcap

##
## Variation -- Only work on simple vt100 terminals
##
vt100: CFLAGS += -D"USE_CAP" -D"USE_HARDCODE"

##
## Variation -- compile for Solaris
##

solaris: CFLAGS += -D"USE_X11" -D"USE_GCU" -D"SOLARIS"
solaris: LIBS := -lX11 -lsocket -lcurses

##
## Variation -- compile for SGI Indigo runnig Irix
##

sgi: CFLAGS += -D"USE_X11" -D"USE_GCU" -D"SGI"
sgi: LIBS := -lX11 -lcurses -ltermcap -lsun


##
## Variation -- compile for Dec ALPHA OSF/1 v2.0
##

dec: CFLAGS += -std -Olimit 4000 -D"USE_X11" -D"USE_GCU"
dec: LIBS := -lX11 -lcurses -ltermcap -lrpcsvc

##
## Variation -- compile for Interactive Unix (ISC) systems
##

isc: CFLAGS += -D"USE_X11" -D"USE_GCU" -D"ISC"
isc: LIBS := -lX11 -lcurses -lnsl_s -linet -lcposix

##
## Variation -- Support fat binaries under NEXTSTEP
##

next: CFLAGS += -D"USE_GCU" -arch m68k -arch i386
next: LIBS := -lcurses -ltermcap

##
## Variation -- compile for AIX 4.2.1 systems
## (Tested on an IBM SP2)
##

aix: CFLAGS += -bnoquiet -D"USE_X11" -D"SYS_V"
aix: LIBS := -lX11 -ltermcap -lcurses -lbsd -lXm -lXmu -lXaw -lXt

##
## Variation -- Dos using "main-dos.c" and the allegro library
##
dos: CFLAGS += -s -DUSE_DOS -DUSE_IBM -D"USE_BACKGROUND"
dos: LIBS := -lpc -lalleg
dos: INSTALL := copy zangband ../zangband.exe
dos: LUA := lua\# Dos has different path seperators

##
## Variation -- Compile using the main-ibm.c port
##
ibm: CFLAGS += -DUSE_IBM
ibm: LIBS := -lpc
ibm: LUA := lua\# Dos has different path seperators

##
## Variation -- Compile using the lcc32 compiler
##
lcc: LCC_PATH := C:\lcc
lcc: CC	:= $(LCC_PATH)\bin\lcc.exe
lcc: LIBS := $(LCC_PATH)\lib\winmm.lib -I$(LCC_PATH)\include
lcc: LDFLAGS := -s -subsystem windows
lcc: RES := $(LCC_PATH)\bin\lrc.exe
lcc: RESCMD := -I$(LCC_PATH)\include angband.rc
lcc: ANGOBJS += angband.res readdib.o
lcc: INSTALL := copy zangband ..\zangband.exe
lcc: LUA := lua\# Dos has different path seperators

##
## Variation -- Compile for Risc OS 3.10 or later  (Acorn)
##
## Remove the #s to generate a debug version
##
risc: CC := cc
risc: LD := link
risc: CFLAGS := -IOS:,C: -throwback -depend !Depend -Wan -ff -zps1 #-g
risc: LDFLAGS := -s symbols #-d
risc: INSTALL := Squeeze zangband ^.!RunImage
risc: ANGOBJS += C:o.Stubs OSLib:o.OSLib C:o.eventlib

##########################################################

##
## The "source" and "object" files.
##

##
## Lua Object Files
##

LUAOBJS := $(addprefix $(LUA), \
  lapi.o ldebug.o lmem.o lstrlib.o lvm.o \
  tolua_lb.o lauxlib.o ldo.o lobject.o ltable.o \
  lzio.o tolua_rg.o lbaselib.o lfunc.o lparser.o \
  ltests.o tolua_bd.o tolua_tm.o lcode.o lgc.o \
  lstate.o ltm.o tolua_eh.o tolua_tt.o ldblib.o \
  llex.o lstring.o lundump.o tolua_gp.o)


TOLUAOBJS := \
  $(addprefix $(LUA), tolua.o tolualua.o liolib.o) $(LUAOBJS)


##
## Main list of objects and source files.
##
SRCS := $(ANGSRCS) $(ZUTILSRCS) $(BORGSRCS)

OBJS := $(ANGOBJS) $(ZUTILOBJS) $(BORGOBJS) $(LUAOBJS)

##
## Hack - GCC requires other flags
##
ifeq (gcc, $(findstring gcc, $(CC)))
	CFLAGS += -fno-strength-reduce
endif

##
## (Installing is much nicer if you don't use the autoconf generated
## makefile system.)
##

install: zangband
	$(INSTALL)


##
## Build the "ZAngband" program
##

zangband: $(OBJS)
	$(CC) $(CFLAGS) -o zangband $(OBJS) $(LDFLAGS) $(LIBS)



##
## Clean up old junk
##

clean:
	-rm -f *.bak *.o;
	-rm -f ./lua/*.bak ./lua/*.o;
	-rm -f ./l-*.c;
	-rm -f ./lua/tolua;
	-rm -f ./lua/tolua_boot;
	-del *.obj
	-del lua\*.obj
	-del *.exe
	-del lua\*.exe
	-del *.res
##
## Generate dependencies automatically
##

depend:
	makedepend -D__MAKEDEPEND__ $(SRCS)


##
## Lua stuff
##

$(LUA)tolua: $(TOLUAOBJS)
	$(CC) -o $(LUA)tolua $(TOLUAOBJS) $(LDFLAGS) $(LIBS)

##
## Low-level Headers
##

HDRS := \
	h-basic.h \
	h-define.h h-type.h h-system.h h-config.h

##
## Angband includes
##

INCS := \
	angband.h \
	z-config.h defines.h types.h externs.h \
	z-term.h z-rand.h z-util.h z-virt.h z-form.h $(HDRS)

##
## Generic dependancy information
##

$(ANGOBJS): $(INCS)
$(ZUTILOBJS): $(HDRS)
$(BORGOBJS): $(HDRS)

##
## Extra dependancies
##

generate.o: grid.h generate.h rooms.h streams.h
grid.o: grid.h generate.h
rooms.o: grid.h generate.h rooms.h
streams.o: grid.h generate.h
maid-grf.o: maid-grf.h
maid-x11.o: maid-grf.h
main-acn.o: maid-grf.h
main-gtk.o: maid-grf.h
main-win.o: maid-grf.h
main-x11.o: maid-grf.h maid-x11.h
main-xaw.o: maid-grf.h maid-x11.h
main-xpj.o: maid-grf.h maid-x11.h
quest.o: wild.h grid.h
readdib.o: readdib.h
wild1.o: wild.h grid.h
wild2.o: wild.h grid.h
z-form.o: z-form.h z-util.h z-virt.h
z-rand.o: z-rand.h
z-term.o: z-term.h z-virt.h
z-util.o: z-util.h
z-virt.o: z-virt.h z-util.h

## Each borg file depends on the ones before it.
## Hack - the dependance on the .o files encodes this.

zborg1.o: zborg1.h maid-grf.h
zborg2.o: zborg2.h zborg1.o
zborg3.o: zborg3.h zborg2.o
zborg4.o: zborg4.h zborg3.o
zborg5.o: zborg5.h zborg4.o
zborg6.o: zborg6.h zborg5.o
zborg7.o: zborg7.h zborg6.o
zborg8.o: zborg8.h zborg7.o
zborg9.o: zborg9.h zborg8.o

##
## Compiling angband.rc
##
## Note: this format seems to work but the alternative actually used
## is the one recommended by Cygnus
##
## angband.res : angband.rc
##       $(WRES) angband.rc angband.res
##

angband.res : angband.rc
	$(RES) $(RESCMD)

##
## Build wrappers
##
## $(subst l-,,$*) removes the leading "l-", and
## trailing ".c" from the filename.
##

$(LUAWSRCS): %.c: %.pkg $(LUA)tolua
	lua/tolua -n $(subst l-,,$*) -o $@ $<

##
## Phony targets
##
.PHONY: install clean depend $(PORTS) lcc_clean dos_clean ibm_clean
