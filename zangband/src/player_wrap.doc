.\src\player_wrap.c

[ Python Module : player ]


cvar.p_ptr
        [ Global : player_type * p_ptr ]

INVEN_PACK = 23
        [ Constant: int  ]
        * Indexes used for various "equipment" slots (hard-coded by savefiles,
        etc). 

INVEN_WIELD = 24
        [ Constant: int  ]

INVEN_BOW = 25
        [ Constant: int  ]

INVEN_LEFT = 26
        [ Constant: int  ]

INVEN_RIGHT = 27
        [ Constant: int  ]

INVEN_NECK = 28
        [ Constant: int  ]

INVEN_LITE = 29
        [ Constant: int  ]

INVEN_BODY = 30
        [ Constant: int  ]

INVEN_OUTER = 31
        [ Constant: int  ]

INVEN_ARM = 32
        [ Constant: int  ]

INVEN_HEAD = 33
        [ Constant: int  ]

INVEN_HANDS = 34
        [ Constant: int  ]

INVEN_FEET = 35
        [ Constant: int  ]
        * Total number of inventory slots (hard-coded). 

INVEN_TOTAL = 36
        [ Constant: int  ]

1.  class s16b_array_6
======================
[ created from struct s16b_array_6 ]


self.data
        [ Member data: returns s16b * ]

2.  s16b

=========



3.  class player_type
=====================
[ created from struct player_type ]


self.oldpy
        [ Member data: returns s16b  ]
        Previous player location 

self.oldpx
        [ Member data: returns s16b  ]
        Previous player location 

self.psex
        [ Member data: returns byte  ]
        Sex index 

self.prace
        [ Member data: returns byte  ]
        Race index 

self.pclass
        [ Member data: returns byte  ]
        Class index 

self.realm1
        [ Member data: returns byte  ]
        First magic realm 

self.realm2
        [ Member data: returns byte  ]
        Second magic realm 

self.oops
        [ Member data: returns byte  ]
        Unused 

self.hitdie
        [ Member data: returns byte  ]
        Hit dice (sides) 

self.expfact
        [ Member data: returns u16b  ]
        Experience factor * Note: was byte, causing overflow for Amberite
        * characters (such as Amberite Paladins) 

self.age
        [ Member data: returns s16b  ]
        Characters age 

self.ht
        [ Member data: returns s16b  ]
        Height 

self.wt
        [ Member data: returns s16b  ]
        Weight 

self.sc
        [ Member data: returns s16b  ]
        Social Class 

self.au
        [ Member data: returns s32b  ]
        Current Gold 

self.max_exp
        [ Member data: returns s32b  ]
        Max experience 

self.exp
        [ Member data: returns s32b  ]
        Cur experience 

self.exp_frac
        [ Member data: returns u16b  ]
        Cur exp frac (times 2^16) 

self.level
        [ Member data: returns s16b  ]
        Level 

self.town_num
        [ Member data: returns s16b  ]
        Current town number 

self.arena_number
        [ Member data: returns s16b  ]
        monster number in arena 

self.inside_arena
        [ Member data: returns s16b  ]
        Is character inside arena? 

self.inside_quest
        [ Member data: returns s16b  ]
        Inside quest level 

self.rewards
        [ Member data: returns s16b * ]
        Status of rewards in town 

self.wilderness_x
        [ Member data: returns s32b  ]
        Coordinates in the wilderness 

self.wilderness_y
        [ Member data: returns s32b  ]

self.mhp
        [ Member data: returns s16b  ]
        Max hit pts 

self.chp
        [ Member data: returns s16b  ]
        Cur hit pts 

self.chp_frac
        [ Member data: returns u16b  ]
        Cur hit frac (times 2^16) 

self.msp
        [ Member data: returns s16b  ]
        Max mana pts 

self.csp
        [ Member data: returns s16b  ]
        Cur mana pts 

self.csp_frac
        [ Member data: returns u16b  ]
        Cur mana frac (times 2^16) 

self.max_plv
        [ Member data: returns s16b  ]
        Max Player Level 

self.max_dlv
        [ Member data: returns s16b  ]
        Max level explored 

self.stat_max
        [ Member data: returns s16b * ]
        Current "maximal" stat values 

self.stat_cur
        [ Member data: returns s16b * ]
        Current "natural" stat values 

self.fast
        [ Member data: returns s16b  ]
        Timed -- Fast 

self.slow
        [ Member data: returns s16b  ]
        Timed -- Slow 

self.blind
        [ Member data: returns s16b  ]
        Timed -- Blindness 

self.paralyzed
        [ Member data: returns s16b  ]
        Timed -- Paralysis 

self.confused
        [ Member data: returns s16b  ]
        Timed -- Confusion 

self.afraid
        [ Member data: returns s16b  ]
        Timed -- Fear 

self.image
        [ Member data: returns s16b  ]
        Timed -- Hallucination 

self.poisoned
        [ Member data: returns s16b  ]
        Timed -- Poisoned 

self.cut
        [ Member data: returns s16b  ]
        Timed -- Cut 

self.stun
        [ Member data: returns s16b  ]
        Timed -- Stun 

self.protevil
        [ Member data: returns s16b  ]
        Timed -- Protection 

self.invuln
        [ Member data: returns s16b  ]
        Timed -- Invulnerable 

self.hero
        [ Member data: returns s16b  ]
        Timed -- Heroism 

self.shero
        [ Member data: returns s16b  ]
        Timed -- Super Heroism 

self.shield
        [ Member data: returns s16b  ]
        Timed -- Shield Spell 

self.blessed
        [ Member data: returns s16b  ]
        Timed -- Blessed 

self.tim_invis
        [ Member data: returns s16b  ]
        Timed -- See Invisible 

self.tim_infra
        [ Member data: returns s16b  ]
        Timed -- Infra Vision 

self.oppose_acid
        [ Member data: returns s16b  ]
        Timed -- oppose acid 

self.oppose_elec
        [ Member data: returns s16b  ]
        Timed -- oppose lightning 

self.oppose_fire
        [ Member data: returns s16b  ]
        Timed -- oppose heat 

self.oppose_cold
        [ Member data: returns s16b  ]
        Timed -- oppose cold 

self.oppose_pois
        [ Member data: returns s16b  ]
        Timed -- oppose poison 

self.tim_esp
        [ Member data: returns s16b  ]
        Timed ESP 

self.wraith_form
        [ Member data: returns s16b  ]
        Timed wraithform 

self.resist_magic
        [ Member data: returns s16b  ]
        Timed Resist Magic (later) 

self.tim_xtra1
        [ Member data: returns s16b  ]
        Later 

self.tim_xtra2
        [ Member data: returns s16b  ]
        Later 

self.tim_xtra3
        [ Member data: returns s16b  ]
        Later 

self.tim_xtra4
        [ Member data: returns s16b  ]
        Later 

self.tim_xtra5
        [ Member data: returns s16b  ]
        Later 

self.tim_xtra6
        [ Member data: returns s16b  ]
        Later 

self.tim_xtra7
        [ Member data: returns s16b  ]
        Later 

self.tim_xtra8
        [ Member data: returns s16b  ]
        Later 

self.chaos_patron
        [ Member data: returns s16b  ]

self.muta1
        [ Member data: returns u32b  ]

self.muta2
        [ Member data: returns u32b  ]

self.muta3
        [ Member data: returns u32b  ]

self.word_recall
        [ Member data: returns s16b  ]
        Word of recall counter 

self.energy
        [ Member data: returns s16b  ]
        Current energy 

self.food
        [ Member data: returns s16b  ]
        Current nutrition 

self.confusing
        [ Member data: returns byte  ]
        Glowing hands 

self.searching
        [ Member data: returns byte  ]
        Currently searching 

self.new_spells
        [ Member data: returns s16b  ]
        Number of spells available 

self.old_spells
        [ Member data: returns s16b  ]

self.old_cumber_armor
        [ Member data: returns bool  ]

self.old_cumber_glove
        [ Member data: returns bool  ]

self.old_heavy_wield
        [ Member data: returns bool  ]

self.old_heavy_shoot
        [ Member data: returns bool  ]

self.old_icky_wield
        [ Member data: returns bool  ]

self.old_lite
        [ Member data: returns s16b  ]
        Old radius of lite (if any) 

self.old_view
        [ Member data: returns s16b  ]
        Old radius of view (if any) 

self.old_food_aux
        [ Member data: returns s16b  ]
        Old value of food 

self.cumber_armor
        [ Member data: returns bool  ]
        Mana draining armor 

self.cumber_glove
        [ Member data: returns bool  ]
        Mana draining gloves 

self.heavy_wield
        [ Member data: returns bool  ]
        Heavy weapon 

self.heavy_shoot
        [ Member data: returns bool  ]
        Heavy shooter 

self.icky_wield
        [ Member data: returns bool  ]
        Icky weapon 

self.cur_lite
        [ Member data: returns s16b  ]
        Radius of lite (if any) 

self.notice
        [ Member data: returns u32b  ]
        Special Updates (bit flags) 

self.update
        [ Member data: returns u32b  ]
        Pending Updates (bit flags) 

self.redraw
        [ Member data: returns u32b  ]
        Normal Redraws (bit flags) 

self.window
        [ Member data: returns u32b  ]
        Window Redraws (bit flags) 

self.stat_use
        [ Member data: returns s16b * ]
        Current modified stats 

self.stat_top
        [ Member data: returns s16b * ]
        Maximal modified stats 

self.stat_add
        [ Member data: returns s16b * ]
        Modifiers to stat values 

self.stat_ind
        [ Member data: returns s16b * ]
        Indexes into stat tables 

self.immune_acid
        [ Member data: returns bool  ]
        Immunity to acid 

self.immune_elec
        [ Member data: returns bool  ]
        Immunity to lightning 

self.immune_fire
        [ Member data: returns bool  ]
        Immunity to fire 

self.immune_cold
        [ Member data: returns bool  ]
        Immunity to cold 

self.resist_acid
        [ Member data: returns bool  ]
        Resist acid 

self.resist_elec
        [ Member data: returns bool  ]
        Resist lightning 

self.resist_fire
        [ Member data: returns bool  ]
        Resist fire 

self.resist_cold
        [ Member data: returns bool  ]
        Resist cold 

self.resist_pois
        [ Member data: returns bool  ]
        Resist poison 

self.resist_conf
        [ Member data: returns bool  ]
        Resist confusion 

self.resist_sound
        [ Member data: returns bool  ]
        Resist sound 

self.resist_lite
        [ Member data: returns bool  ]
        Resist light 

self.resist_dark
        [ Member data: returns bool  ]
        Resist darkness 

self.resist_chaos
        [ Member data: returns bool  ]
        Resist chaos 

self.resist_disen
        [ Member data: returns bool  ]
        Resist disenchant 

self.resist_shard
        [ Member data: returns bool  ]
        Resist shards 

self.resist_nexus
        [ Member data: returns bool  ]
        Resist nexus 

self.resist_blind
        [ Member data: returns bool  ]
        Resist blindness 

self.resist_neth
        [ Member data: returns bool  ]
        Resist nether 

self.resist_fear
        [ Member data: returns bool  ]
        Resist fear 

self.reflect
        [ Member data: returns bool  ]
        Reflect 'bolt' attacks 

self.sh_fire
        [ Member data: returns bool  ]
        Fiery 'immolation' effect 

self.sh_elec
        [ Member data: returns bool  ]
        Electric 'immolation' effect 

self.anti_magic
        [ Member data: returns bool  ]
        Anti-magic 

self.anti_tele
        [ Member data: returns bool  ]
        Prevent teleportation 

self.sustain_str
        [ Member data: returns bool  ]
        Keep strength 

self.sustain_int
        [ Member data: returns bool  ]
        Keep intelligence 

self.sustain_wis
        [ Member data: returns bool  ]
        Keep wisdom 

self.sustain_dex
        [ Member data: returns bool  ]
        Keep dexterity 

self.sustain_con
        [ Member data: returns bool  ]
        Keep constitution 

self.sustain_chr
        [ Member data: returns bool  ]
        Keep charisma 

self.aggravate
        [ Member data: returns bool  ]
        Aggravate monsters 

self.teleport
        [ Member data: returns bool  ]
        Random teleporting 

self.exp_drain
        [ Member data: returns bool  ]
        Experience draining 

self.ffall
        [ Member data: returns bool  ]
        No damage falling 

self.lite
        [ Member data: returns bool  ]
        Permanent light 

self.free_act
        [ Member data: returns bool  ]
        Never paralyzed 

self.see_inv
        [ Member data: returns bool  ]
        Can see invisible 

self.regenerate
        [ Member data: returns bool  ]
        Regenerate hit pts 

self.hold_life
        [ Member data: returns bool  ]
        Resist life draining 

self.telepathy
        [ Member data: returns bool  ]
        Telepathy 

self.slow_digest
        [ Member data: returns bool  ]
        Slower digestion 

self.bless_blade
        [ Member data: returns bool  ]
        Blessed blade 

self.xtra_might
        [ Member data: returns bool  ]
        Extra might bow 

self.impact
        [ Member data: returns bool  ]
        Earthquake blows 

self.dis_to_h
        [ Member data: returns s16b  ]
        Known bonus to hit 

self.dis_to_d
        [ Member data: returns s16b  ]
        Known bonus to dam 

self.dis_to_a
        [ Member data: returns s16b  ]
        Known bonus to ac 

self.dis_ac
        [ Member data: returns s16b  ]
        Known base ac 

self.to_h
        [ Member data: returns s16b  ]
        Bonus to hit 

self.to_d
        [ Member data: returns s16b  ]
        Bonus to dam 

self.to_a
        [ Member data: returns s16b  ]
        Bonus to ac 

self.ac
        [ Member data: returns s16b  ]
        Base ac 

self.see_infra
        [ Member data: returns s16b  ]
        Infravision range 

self.skill_dis
        [ Member data: returns s16b  ]
        Skill: Disarming 

self.skill_dev
        [ Member data: returns s16b  ]
        Skill: Magic Devices 

self.skill_sav
        [ Member data: returns s16b  ]
        Skill: Saving throw 

self.skill_stl
        [ Member data: returns s16b  ]
        Skill: Stealth factor 

self.skill_srh
        [ Member data: returns s16b  ]
        Skill: Searching ability 

self.skill_fos
        [ Member data: returns s16b  ]
        Skill: Searching frequency 

self.skill_thn
        [ Member data: returns s16b  ]
        Skill: To hit (normal) 

self.skill_thb
        [ Member data: returns s16b  ]
        Skill: To hit (shooting) 

self.skill_tht
        [ Member data: returns s16b  ]
        Skill: To hit (throwing) 

self.skill_dig
        [ Member data: returns s16b  ]
        Skill: Digging 

self.num_blow
        [ Member data: returns s16b  ]
        Number of blows 

self.num_fire
        [ Member data: returns s16b  ]
        Number of shots 

self.tval_xtra
        [ Member data: returns byte  ]
        Correct xtra tval 

self.tval_ammo
        [ Member data: returns byte  ]
        Correct ammo tval 

self.pspeed
        [ Member data: returns s16b  ]
        Current speed 

self.pet_follow_distance
        [ Member data: returns byte  ]
        Length of the imaginary "leash" for pets 

self.pet_open_doors
        [ Member data: returns byte  ]
        flag - allow pets to open doors 

self.pet_pickup_items
        [ Member data: returns byte  ]
        flag - allow pets to pickup items 

self.exit_bldg
        [ Member data: returns byte  ]
        Goal obtained in arena? 

self.leftbldg
        [ Member data: returns byte  ]
        did we just leave a special area? 

self.leaving
        [ Member data: returns bool  ]
        True if player is leaving 

self.name
        [ Member data: returns char * ]

self.dun_level
        [ Member data: returns int  ]

self.py
        [ Member data: returns s16b  ]

self.px
        [ Member data: returns s16b  ]

self.player_base
        [ Member data: returns char * ]

self.died_from
        [ Member data: returns char * ]

self.history
        [ Member data: returns char * ]

inventory(index)
        [ Member : returns object_type * ]

inven_item_increase(item,num)
        [ Member : returns void  ]

inven_item_optimize(item)
        [ Member : returns void  ]

carry(o_ptr)
        [ Member : returns void  ]

place(y,x)
        [ Member : returns s16b  ]

player_type_teleport(self,dis)
        [ Member : returns void  ]

teleport_to(ny,nx)
        [ Member : returns void  ]

teleport_level()
        [ Member : returns void  ]

recall(turns)
        [ Member : returns void  ]

word_of_recall()
        [ Member : returns void  ]

disenchant(mode)
        [ Member : returns bool  ]

mutate_player()
        [ Member : returns void  ]

nexus(m_ptr)
        [ Member : returns void  ]

phlogiston()
        [ Member : returns void  ]

brand_weapon(brand_type)
        [ Member : returns void  ]

call_the_void()
        [ Member : returns void  ]

fetch(dir,wgt,require_los)
        [ Member : returns void  ]

alter_reality()
        [ Member : returns void  ]

gain_exp(amount)
        [ Member : returns void  ]
        void lose_exp(s32b amount); void do_poly_self(void); 

----------

PY_MAX_EXP = 99999999L
        [ Constant: long  ]

PY_MAX_GOLD = 999999999L
        [ Constant: long  ]

PY_MAX_LEVEL = 50
        [ Constant: int  ]
        * Player "food" crucial values 

PY_FOOD_MAX = 15000
        [ Constant: int  ]
        Food value (Normal) 

PY_FOOD_FULL = 10000
        [ Constant: int  ]
        Food value (Hungry) 

PY_FOOD_ALERT = 2000
        [ Constant: int  ]
        Food value (Weak) 

PY_FOOD_WEAK = 1000
        [ Constant: int  ]
        Food value (Fainting) 

PY_FOOD_FAINT = 500
        [ Constant: int  ]
        Food value (Starving) 

PY_FOOD_STARVE = 100
        [ Constant: int  ]
        * Player regeneration constants 

PY_REGEN_NORMAL = 197
        [ Constant: int  ]

PY_REGEN_WEAK = 98
        [ Constant: int  ]

PY_REGEN_FAINT = 33
        [ Constant: int  ]
        Min amount hp regen*2^16 

PY_REGEN_HPBASE = 1442
        [ Constant: int  ]
        Min amount mana regen*2^16 

PY_REGEN_MNBASE = 524
        [ Constant: int  ]
        * Indexes of the various "stats" (hard-coded by savefiles, etc).
        

A_STR = 0
        [ Constant: int  ]

A_INT = 1
        [ Constant: int  ]

A_WIS = 2
        [ Constant: int  ]

A_DEX = 3
        [ Constant: int  ]

A_CON = 4
        [ Constant: int  ]

A_CHR = 5
        [ Constant: int  ]
        * Player sex constants (hard-coded by save-files, arrays, etc)
        

SEX_FEMALE = 0
        [ Constant: int  ]

SEX_MALE = 1
        [ Constant: int  ]

